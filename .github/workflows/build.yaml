name: Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  Build-Ubuntu:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: "8"
          distribution: "adopt"
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install jep
          PYTHONHOME=$(dirname $(dirname $(which python)))
          echo PYTHONHOME=$PYTHONHOME >> $GITHUB_ENV
          echo PYTHONHOME=$PYTHONHOME
      - name: Build and execute unit tests
        run: |
          ./gradlew clean build test publishToMavenLocal
      - name: Define project environment variables
        run: |
          PROJECT_VERSION=$(./gradlew properties | grep 'version:' | sed 's/version: //')
          PROJECT_NAME=$(./gradlew properties | grep 'name:' | sed 's/name: //')
          echo PROJECT_VERSION=$PROJECT_VERSION >> $GITHUB_ENV
          echo PROJECT_VERSION=$PROJECT_VERSION
          echo PROJECT_NAME=$PROJECT_NAME >> $GITHUB_ENV
          echo PROJECT_NAME=$PROJECT_NAME

          if [[ "PROJECT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9](-SNAPSHOT)?$ ]]; then
              IS_RELEASE_VERSION='1'
          else
              IS_RELEASE_VERSION='0'
          fi

          echo IS_RELEASE_VERSION=$IS_RELEASE_VERSION >> $GITHUB_ENV
          echo IS_RELEASE_VERSION=$IS_RELEASE_VERSION

          BASENAME="$PROJECT_NAME-$PROJECT_VERSION"
          ARTIFACT_NAME="$BASENAME.jar"
          ARTIFACT_PATH="build/libs/$ARTIFACT_NAME"
          POM_NAME="$BASENAME.pom"
          POM_PATH=build/publications/maven/pom-default.xml
          MODULE_NAME="$BASENAME.module"
          MODULE_PATH=build/publications/maven/module.json

          echo ARTIFACT_NAME=${ARTIFACT_NAME} >> $GITHUB_ENV
          echo ARTIFACT_PATH=${ARTIFACT_PATH} >> $GITHUB_ENV
          echo POM_NAME=$POM_NAME >> $GITHUB_ENV
          echo POM_PATH=$POM_PATH >> $GITHUB_ENV
          echo MODULE_NAME=$MODULE_NAME >> $GITHUB_ENV
          echo MODULE_PATH=$MODULE_PATH >> $GITHUB_ENV
      - name: Create Release (main branch and release version only)
        if: ${{ github.ref == 'refs/heads/main' && env.IS_RELEASE_VERSION == '1' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}
          release_name: Jepyter ${{ env.PROJECT_VERSION }}
          draft: false
          prerelease: false
      - name: Upload jar
        if: ${{ github.ref == 'refs/heads/main' && env.IS_RELEASE_VERSION == '1' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/java-archive
      - name: Upload module json
        if: ${{ github.ref == 'refs/heads/main' && env.IS_RELEASE_VERSION == '1' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MODULE_PATH }}
          asset_name: ${{ env.MODULE_NAME }}
          asset_content_type: application/java-archive
      - name: Upload pom
        if: ${{ github.ref == 'refs/heads/main' && env.IS_RELEASE_VERSION == '1' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.POM_PATH }}
          asset_name: ${{ env.POM_NAME }}
          asset_content_type: application/java-archive
      - run: echo "üçè This job's status is ${{ job.status }}."
